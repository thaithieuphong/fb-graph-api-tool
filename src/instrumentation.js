import clientPromise from './lib/mongodb.js';
import { HashPassword } from './lib/hashAndComparePw.js';

export async function register() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ·ª©ng d·ª•ng...\n');
        console.log('üìä ƒêang t·∫°o ch·ªâ m·ª•c c∆° s·ªü d·ªØ li·ªáu...\n');
        const client = await clientPromise;
        const db = client.db();
        const usersCollection = db.collection('users');

        // T·∫°o unique index cho username v√† email
        await usersCollection.createIndex({ username: 1 }, { unique: true });
        await usersCollection.createIndex({ email: 1 }, { unique: true });

        console.log('‚úÖ Ch·ªâ m·ª•c c∆° s·ªü d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng\n');
        // Kh·ªüi t·∫°o t√†i kho·∫£n admin
        console.log('üë§ ƒêang kh·ªüi t·∫°o t√†i kho·∫£n qu·∫£n tr·ªã...\n');

        // Ki·ªÉm tra xem admin ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingAdmin = await usersCollection.findOne({
            $or: [
                { username: process.env.ADMIN_USERNAME },
                { email: process.env.ADMIN_EMAIL },
                { role: 'admin' }
            ]
        });

        if (existingAdmin) {
            console.log('‚úÖ T√†i kho·∫£n qu·∫£n tr·ªã ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc kh·ªüi t·∫°o.\n');
            return
        }

        // T·∫°o t√†i kho·∫£n admin m·ªõi
        const hashedPassword = await HashPassword(process.env.ADMIN_PASSWORD);

        const adminUser = {
            username: process.env.ADMIN_USERNAME,
            email: process.env.ADMIN_EMAIL,
            password: hashedPassword,
            role: 'admin',
            createdAt: new Date(),
            updatedAt: new Date(),
            isActive: true,
            profile: {
                firstName: 'System',
                lastName: 'Administrator',
                avatar: null
            }
        };

        const result = await usersCollection.insertOne(adminUser);

        if (result.insertedId) {
            console.log('üéâ T√†i kho·∫£n qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n');
            console.log(`T√™n ng∆∞·ªùi d√πng: ${process.env.ADMIN_USERNAME}`);
            console.log(`Email: ${process.env.ADMIN_EMAIL}\n`);
        } else {
            console.log('Kh√¥ng t·∫°o ƒë∆∞·ª£c t√†i kho·∫£n qu·∫£n tr·ªã\n')
        }

        console.log('‚úÖ ƒê√£ ho√†n t·∫•t kh·ªüi t·∫°o ·ª©ng d·ª•ng!\n');

    } catch (error) {
        console.error('‚ùå Kh·ªüi t·∫°o ·ª©ng d·ª•ng kh√¥ng th√†nh c√¥ng:', error);
    }

}